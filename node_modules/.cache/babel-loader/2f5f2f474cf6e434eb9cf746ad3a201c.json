{"ast":null,"code":"import _classCallCheck from\"/Users/thezucks/netcraft/test-excel/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/thezucks/netcraft/test-excel/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/thezucks/netcraft/test-excel/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/thezucks/netcraft/test-excel/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"/Users/thezucks/netcraft/test-excel/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/thezucks/netcraft/test-excel/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faHeart,faTimes}from'@fortawesome/free-solid-svg-icons';var List=/*#__PURE__*/function(_Component){_inherits(List,_Component);function List(props){var _this;_classCallCheck(this,List);_this=_possibleConstructorReturn(this,_getPrototypeOf(List).call(this,props));_this.state={filtered:[]};_this.handleChange=_this.handleChange.bind(_assertThisInitialized(_this));return _this;}_createClass(List,[{key:\"componentDidMount\",value:function componentDidMount(){this.setState({filtered:this.props.items});}},{key:\"componentWillReceiveProps\",value:function componentWillReceiveProps(nextProps){this.setState({filtered:nextProps.items});}},{key:\"handleChange\",value:function handleChange(e){// Variable to hold the original version of the list\nvar currentList=[];// Variable to hold the filtered list before putting into state\nvar newList=[];// If the search bar isn't empty\nif(e.target.value!==\"\"){// Assign the original list to currentList\ncurrentList=this.props.items;// Use .filter() to determine which items should be displayed\n// based on the search terms\nnewList=currentList.filter(function(item){// change current item to lowercase\nvar lc=item.toLowerCase();// change search term to lowercase\nvar filter=e.target.value.toLowerCase();// check to see if the current list item includes the search term\n// If it does, it will be added to newList. Using lowercase eliminates\n// issues with capitalization in search terms and search content\nreturn lc.includes(filter);});}else{// If the search bar is empty, set newList to original task list\nnewList=this.props.items;}// Set the filtered state based on what our rules added to newList\nthis.setState({filtered:newList});}},{key:\"render\",value:function render(){var _this2=this;return React.createElement(\"div\",null,React.createElement(\"input\",{type:\"text\",className:\"input\",onChange:this.handleChange,placeholder:\"Search...\"}),React.createElement(\"ul\",null,this.state.filtered.map(function(item){return React.createElement(\"li\",{key:item},React.createElement(FontAwesomeIcon,{icon:faHeart}),item,\" \\xA0\",React.createElement(\"span\",{className:\"\",onClick:function onClick(){return _this2.props.delete(item);}},React.createElement(\"button\",null,React.createElement(FontAwesomeIcon,{icon:faTimes}),\" Delete\")));})));}}]);return List;}(Component);export default List;","map":{"version":3,"sources":["/Users/thezucks/netcraft/test-excel/src/Testing-search/List/List.js"],"names":["React","Component","FontAwesomeIcon","faHeart","faTimes","List","props","state","filtered","handleChange","bind","setState","items","nextProps","e","currentList","newList","target","value","filter","item","lc","toLowerCase","includes","map","delete"],"mappings":"kuBAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CACA,OAASC,eAAT,KAAgC,gCAAhC,CACA,OAASC,OAAT,CAAkBC,OAAlB,KAAiC,mCAAjC,C,GAEMC,CAAAA,I,8DACF,cAAYC,KAAZ,CAAmB,sCACf,sEAAMA,KAAN,GACA,MAAKC,KAAL,CAAa,CACTC,QAAQ,CAAE,EADD,CAAb,CAGA,MAAKC,YAAL,CAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB,CALe,aAMlB,C,8EAEmB,CAChB,KAAKC,QAAL,CAAc,CACVH,QAAQ,CAAE,KAAKF,KAAL,CAAWM,KADX,CAAd,EAGH,C,4EAEyBC,S,CAAW,CACjC,KAAKF,QAAL,CAAc,CACVH,QAAQ,CAAEK,SAAS,CAACD,KADV,CAAd,EAGH,C,kDAEYE,C,CAAG,CACZ;AACA,GAAIC,CAAAA,WAAW,CAAG,EAAlB,CACA;AACA,GAAIC,CAAAA,OAAO,CAAG,EAAd,CAEA;AACA,GAAIF,CAAC,CAACG,MAAF,CAASC,KAAT,GAAmB,EAAvB,CAA2B,CACvB;AACAH,WAAW,CAAG,KAAKT,KAAL,CAAWM,KAAzB,CAEA;AACA;AACAI,OAAO,CAAGD,WAAW,CAACI,MAAZ,CAAmB,SAAAC,IAAI,CAAI,CACjC;AACA,GAAMC,CAAAA,EAAE,CAAGD,IAAI,CAACE,WAAL,EAAX,CACA;AACA,GAAMH,CAAAA,MAAM,CAAGL,CAAC,CAACG,MAAF,CAASC,KAAT,CAAeI,WAAf,EAAf,CACA;AACA;AACA;AACA,MAAOD,CAAAA,EAAE,CAACE,QAAH,CAAYJ,MAAZ,CAAP,CACH,CATS,CAAV,CAUH,CAhBD,IAgBO,CACH;AACAH,OAAO,CAAG,KAAKV,KAAL,CAAWM,KAArB,CACH,CACD;AACA,KAAKD,QAAL,CAAc,CACVH,QAAQ,CAAEQ,OADA,CAAd,EAGH,C,uCAKQ,iBACL,MACI,gCACI,6BAAO,IAAI,CAAC,MAAZ,CAAmB,SAAS,CAAC,OAA7B,CAAqC,QAAQ,CAAE,KAAKP,YAApD,CAAkE,WAAW,CAAC,WAA9E,EADJ,CAEI,8BACK,KAAKF,KAAL,CAAWC,QAAX,CAAoBgB,GAApB,CAAwB,SAAAJ,IAAI,QACzB,2BAAI,GAAG,CAAEA,IAAT,EAAe,oBAAC,eAAD,EAAiB,IAAI,CAAEjB,OAAvB,EAAf,CACKiB,IADL,SAEI,4BACI,SAAS,CAAC,EADd,CAEI,OAAO,CAAE,yBAAM,CAAA,MAAI,CAACd,KAAL,CAAWmB,MAAX,CAAkBL,IAAlB,CAAN,EAFb,EAGC,kCAAQ,oBAAC,eAAD,EAAiB,IAAI,CAAEhB,OAAvB,EAAR,WAHD,CAFJ,CADyB,EAA5B,CADL,CAFJ,CADJ,CAiBH,C,kBA3EcH,S,EA8EnB,cAAeI,CAAAA,IAAf","sourcesContent":["import React, {Component} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHeart, faTimes } from '@fortawesome/free-solid-svg-icons';\n\nclass List extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filtered: []\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({\n            filtered: this.props.items\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            filtered: nextProps.items\n        });\n    }\n\n    handleChange(e) {\n        // Variable to hold the original version of the list\n        let currentList = [];\n        // Variable to hold the filtered list before putting into state\n        let newList = [];\n\n        // If the search bar isn't empty\n        if (e.target.value !== \"\") {\n            // Assign the original list to currentList\n            currentList = this.props.items;\n\n            // Use .filter() to determine which items should be displayed\n            // based on the search terms\n            newList = currentList.filter(item => {\n                // change current item to lowercase\n                const lc = item.toLowerCase();\n                // change search term to lowercase\n                const filter = e.target.value.toLowerCase();\n                // check to see if the current list item includes the search term\n                // If it does, it will be added to newList. Using lowercase eliminates\n                // issues with capitalization in search terms and search content\n                return lc.includes(filter);\n            });\n        } else {\n            // If the search bar is empty, set newList to original task list\n            newList = this.props.items;\n        }\n        // Set the filtered state based on what our rules added to newList\n        this.setState({\n            filtered: newList\n        });\n    }\n\n\n\n\n    render() {\n        return (\n            <div>\n                <input type=\"text\" className=\"input\" onChange={this.handleChange} placeholder=\"Search...\" />\n                <ul>\n                    {this.state.filtered.map(item => (\n                        <li key={item}><FontAwesomeIcon icon={faHeart} />\n                            {item} &nbsp;\n                            <span\n                                className=\"\"\n                                onClick={() => this.props.delete(item)}\n                            ><button><FontAwesomeIcon icon={faTimes} /> Delete</button></span>\n                        </li>\n                    ))}\n                </ul>\n\n            </div>\n        );\n    }\n}\n\nexport default List;"]},"metadata":{},"sourceType":"module"}