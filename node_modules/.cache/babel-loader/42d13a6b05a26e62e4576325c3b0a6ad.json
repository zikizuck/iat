{"ast":null,"code":"var _jsxFileName = \"/Users/thezucks/netcraft/test-excel/src/Testing-search/Testing-search.js\";\nimport React, { Component } from 'react';\nimport List from \"./List/List\";\n\nclass TestingSearch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [\"go to the market\", \"jksrvhfkr\", \"hkrfvkrwe\"]\n    };\n    this.addItem = this.addItem.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n  }\n\n  removeItem(item) {\n    // Put our list into an array\n    const list = this.state.list.slice(); // Check to see if item passed in matches item in array\n\n    list.some((el, i) => {\n      if (el === item) {\n        // If item matches, remove it from array\n        list.splice(i, 1);\n        return true;\n      }\n    }); // Set state to list\n\n    this.setState({\n      list: list\n    });\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  addItem(e) {\n    // Prevent button click from submitting form\n    e.preventDefault(); // Create variables for our list, the item to add, and our form\n\n    let list = this.state.list;\n    const newItem = document.getElementById(\"addInput\");\n    const form = document.getElementById(\"addItemForm\"); // If our input has a value\n\n    if (newItem.value != \"\") {\n      // Add the new item to the end of our list array\n      list.push(newItem.value); // Then we use that to set the state for list\n\n      this.setState({\n        list: list\n      }); // Finally, we need to reset the form\n\n      newItem.classList.remove(\"is-danger\");\n      form.reset();\n    } else {\n      // If the input doesn't have a value, make the border red since it's required\n      newItem.classList.add(\"is-danger\");\n    }\n  }\n\n  handleChange(e) {\n    // Variable to hold the original version of the list\n    let currentList = []; // Variable to hold the filtered list before putting into state\n\n    let newList = []; // If the search bar isn't empty\n\n    if (e.target.value !== \"\") {\n      // Assign the original list to currentList\n      currentList = this.props.items; // Use .filter() to determine which items should be displayed\n      // based on the search terms\n\n      newList = currentList.filter(item => {\n        // change current item to lowercase\n        const lc = item.toLowerCase(); // change search term to lowercase\n\n        const filter = e.target.value.toLowerCase(); // check to see if the current list item includes the search term\n        // If it does, it will be added to newList. Using lowercase eliminates\n        // issues with capitalization in search terms and search content\n\n        return lc.includes(filter);\n      });\n    } else {\n      // If the search bar is empty, set newList to original task list\n      newList = this.props.items;\n    } // Set the filtered state based on what our rules added to newList\n\n\n    this.setState({\n      filtered: newList\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"section\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(List, {\n      items: this.state.list,\n      delete: this.removeItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"section\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"form\",\n      id: \"addItemForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"input\",\n      id: \"addInput\" // placeholder=\"Something that needs ot be done...\"\n      ,\n      onChange: this.handleChange,\n      placeholder: \"New Content...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-primary btn-sm\",\n      onClick: this.addItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Add Item\")))));\n  }\n\n}\n\nexport default TestingSearch;","map":{"version":3,"sources":["/Users/thezucks/netcraft/test-excel/src/Testing-search/Testing-search.js"],"names":["React","Component","List","TestingSearch","constructor","props","state","list","addItem","bind","removeItem","item","slice","some","el","i","splice","setState","handleChange","e","preventDefault","newItem","document","getElementById","form","value","push","classList","remove","reset","add","currentList","newList","target","items","filter","lc","toLowerCase","includes","filtered","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport List from \"./List/List\";\n\nclass TestingSearch extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            list :[ \"go to the market\", \"jksrvhfkr\",\"hkrfvkrwe\" ]\n        }\n        this.addItem = this.addItem.bind(this);\n        this.removeItem = this.removeItem.bind(this);\n\n\n    }\n    removeItem(item) {\n        // Put our list into an array\n        const list = this.state.list.slice();\n        // Check to see if item passed in matches item in array\n        list.some((el, i) => {\n            if (el === item) {\n                // If item matches, remove it from array\n                list.splice(i, 1);\n                return true;\n            }\n        });\n        // Set state to list\n        this.setState({\n            list: list\n        });\n        this.handleChange = this.handleChange.bind(this);\n\n    }\n    addItem(e) {\n        // Prevent button click from submitting form\n        e.preventDefault();\n\n        // Create variables for our list, the item to add, and our form\n        let list = this.state.list;\n        const newItem = document.getElementById(\"addInput\");\n        const form = document.getElementById(\"addItemForm\");\n\n        // If our input has a value\n        if (newItem.value != \"\") {\n            // Add the new item to the end of our list array\n            list.push(newItem.value);\n            // Then we use that to set the state for list\n            this.setState({\n                list: list\n            });\n            // Finally, we need to reset the form\n            newItem.classList.remove(\"is-danger\");\n            form.reset();\n        } else {\n            // If the input doesn't have a value, make the border red since it's required\n            newItem.classList.add(\"is-danger\");\n        }\n    }\n    handleChange(e) {\n        // Variable to hold the original version of the list\n        let currentList = [];\n        // Variable to hold the filtered list before putting into state\n        let newList = [];\n\n        // If the search bar isn't empty\n        if (e.target.value !== \"\") {\n            // Assign the original list to currentList\n            currentList = this.props.items;\n\n            // Use .filter() to determine which items should be displayed\n            // based on the search terms\n            newList = currentList.filter(item => {\n                // change current item to lowercase\n                const lc = item.toLowerCase();\n                // change search term to lowercase\n                const filter = e.target.value.toLowerCase();\n                // check to see if the current list item includes the search term\n                // If it does, it will be added to newList. Using lowercase eliminates\n                // issues with capitalization in search terms and search content\n                return lc.includes(filter);\n            });\n        } else {\n            // If the search bar is empty, set newList to original task list\n            newList = this.props.items;\n        }\n        // Set the filtered state based on what our rules added to newList\n        this.setState({\n            filtered: newList\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"\">\n                <div className=\"container\">\n                    <section className=\"section\">\n                        <List items={this.state.list} delete={this.removeItem}\n                        />\n                    </section>\n                    <hr />\n                    <section className=\"section\">\n                        <form className=\"form\" id=\"addItemForm\">\n                            <input\n                                type=\"text\"\n                                className=\"input\"\n                                id=\"addInput\"\n                                // placeholder=\"Something that needs ot be done...\"\n                                onChange={this.handleChange} placeholder=\"New Content...\"\n                            />\n                            <button className=\"btn btn-primary btn-sm\" onClick={this.addItem}>\n                                Add Item\n                            </button>\n                        </form>\n                    </section>\n                </div>\n                \n            </div>\n        );\n    }\n}\n\nexport default TestingSearch;"]},"metadata":{},"sourceType":"module"}